{"version":3,"sources":["node_modules/big-integer/BigInteger.js","script.js"],"names":["bigInt","undefined","BASE","LOG_BASE","MAX_INT","MAX_INT_ARR","smallToArray","DEFAULT_ALPHABET","supportsNativeBigInt","BigInt","Integer","v","radix","alphabet","caseSensitive","parseBase","parseValue","BigInteger","value","sign","isSmall","SmallInteger","NativeBigInt","isPrecise","n","Math","floor","arrayToSmall","arr","trim","length","compareAbs","i","createArray","x","Array","truncate","ceil","add","a","b","l_a","sum","l_b","r","carry","base","push","addAny","addSmall","l","subtract","a_l","difference","b_l","borrow","subtractSmall","multiplyLong","product","a_i","j","multiplySmall","shiftLeft","concat","multiplySmallAndArray","square","divModSmall","lambda","q","remainder","divisor","quotient","divModAny","self","Error","negate","abs","comparison","divMod1","quotientDigit","shift","result","divisorMostSignificantDigit","divMod2","guess","xlen","highx","highy","check","part","unshift","reverse","qSign","mod","mSign","isBasicPrime","isUnit","equals","isEven","isDivisibleBy","lesser","millerRabinTest","nPrev","d","prev","divide","next","modPow","prototype","Object","create","plus","subtractAny","minus","small","multiply","l1","l2","useKaratsuba","multiplyKaratsuba","y","max","slice","c","ac","bd","abcd","times","_multiplyBySmall","divmod","over","pow","toString","_0","_1","_2","isNegative","exp","isZero","modInv","isPositive","isOdd","compare","Infinity","compareTo","eq","notEquals","neq","greater","gt","lt","greaterOrEquals","geq","lesserOrEquals","leq","isPrime","strict","bits","bitLength","logN","log","toJSNumber","t","isProbablePrime","iterations","rng","randBetween","lastT","lastR","zero","newT","one","newR","powersOfTwo","powers2Length","highestPower2","shift_isSmall","bitwise","fn","xSign","ySign","xRem","not","yRem","xDigit","yDigit","xDivMod","yDivMod","String","shiftRight","remQuo","and","or","xor","LOBMASK_I","LOBMASK_BI","roughLOB","min","gcd","integerLogarithm","tmp","p","e","text","toLowerCase","absBase","alphabetValues","digits","start","parseBaseFromArray","val","toBase","apply","map","valueOf","neg","Number","left","out","digit","toBaseString","stringify","join","parseStringValue","split","decimalPlace","indexOf","test","parseNumberValue","toArray","str","toJSON","parseInt","minusOne","lcm","isInstance","usedRNG","random","low","range","restricted","top","fromArray","module","hasOwnProperty","exports","define","amd","require","document","addEventListener","event","years_per_universe","milliseconds_per_year","plancks_per_millisecond","milliseconds_per_universe","setInterval","now_ms","Date","now","remaining_ms","remaining_p","remaining_p_fuzzy","remaining_p_fuzzy_binary","replace","getElementById","innerHTML"],"mappings":"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","file":"script.2bbf8a4b.js","sourceRoot":"..","sourcesContent":["var bigInt = (function (undefined) {\r\n    \"use strict\";\r\n\r\n    var BASE = 1e7,\r\n        LOG_BASE = 7,\r\n        MAX_INT = 9007199254740992,\r\n        MAX_INT_ARR = smallToArray(MAX_INT),\r\n        DEFAULT_ALPHABET = \"0123456789abcdefghijklmnopqrstuvwxyz\";\r\n\r\n    var supportsNativeBigInt = typeof BigInt === \"function\";\r\n\r\n    function Integer(v, radix, alphabet, caseSensitive) {\r\n        if (typeof v === \"undefined\") return Integer[0];\r\n        if (typeof radix !== \"undefined\") return +radix === 10 && !alphabet ? parseValue(v) : parseBase(v, radix, alphabet, caseSensitive);\r\n        return parseValue(v);\r\n    }\r\n\r\n    function BigInteger(value, sign) {\r\n        this.value = value;\r\n        this.sign = sign;\r\n        this.isSmall = false;\r\n    }\r\n    BigInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function SmallInteger(value) {\r\n        this.value = value;\r\n        this.sign = value < 0;\r\n        this.isSmall = true;\r\n    }\r\n    SmallInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function NativeBigInt(value) {\r\n        this.value = value;\r\n    }\r\n    NativeBigInt.prototype = Object.create(Integer.prototype);\r\n\r\n    function isPrecise(n) {\r\n        return -MAX_INT < n && n < MAX_INT;\r\n    }\r\n\r\n    function smallToArray(n) { // For performance reasons doesn't reference BASE, need to change this function if BASE changes\r\n        if (n < 1e7)\r\n            return [n];\r\n        if (n < 1e14)\r\n            return [n % 1e7, Math.floor(n / 1e7)];\r\n        return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];\r\n    }\r\n\r\n    function arrayToSmall(arr) { // If BASE changes this function may need to change\r\n        trim(arr);\r\n        var length = arr.length;\r\n        if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {\r\n            switch (length) {\r\n                case 0: return 0;\r\n                case 1: return arr[0];\r\n                case 2: return arr[0] + arr[1] * BASE;\r\n                default: return arr[0] + (arr[1] + arr[2] * BASE) * BASE;\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    function trim(v) {\r\n        var i = v.length;\r\n        while (v[--i] === 0);\r\n        v.length = i + 1;\r\n    }\r\n\r\n    function createArray(length) { // function shamelessly stolen from Yaffle's library https://github.com/Yaffle/BigInteger\r\n        var x = new Array(length);\r\n        var i = -1;\r\n        while (++i < length) {\r\n            x[i] = 0;\r\n        }\r\n        return x;\r\n    }\r\n\r\n    function truncate(n) {\r\n        if (n > 0) return Math.floor(n);\r\n        return Math.ceil(n);\r\n    }\r\n\r\n    function add(a, b) { // assumes a and b are arrays with a.length >= b.length\r\n        var l_a = a.length,\r\n            l_b = b.length,\r\n            r = new Array(l_a),\r\n            carry = 0,\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l_b; i++) {\r\n            sum = a[i] + b[i] + carry;\r\n            carry = sum >= base ? 1 : 0;\r\n            r[i] = sum - carry * base;\r\n        }\r\n        while (i < l_a) {\r\n            sum = a[i] + carry;\r\n            carry = sum === base ? 1 : 0;\r\n            r[i++] = sum - carry * base;\r\n        }\r\n        if (carry > 0) r.push(carry);\r\n        return r;\r\n    }\r\n\r\n    function addAny(a, b) {\r\n        if (a.length >= b.length) return add(a, b);\r\n        return add(b, a);\r\n    }\r\n\r\n    function addSmall(a, carry) { // assumes a is array, carry is number with 0 <= carry < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l; i++) {\r\n            sum = a[i] - base + carry;\r\n            carry = Math.floor(sum / base);\r\n            r[i] = sum - carry * base;\r\n            carry += 1;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall) {\r\n            return new BigInteger(addSmall(a, Math.abs(b)), this.sign);\r\n        }\r\n        return new BigInteger(addAny(a, b), this.sign);\r\n    };\r\n    BigInteger.prototype.plus = BigInteger.prototype.add;\r\n\r\n    SmallInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            if (isPrecise(a + b)) return new SmallInteger(a + b);\r\n            b = smallToArray(Math.abs(b));\r\n        }\r\n        return new BigInteger(addSmall(b, Math.abs(a)), a < 0);\r\n    };\r\n    SmallInteger.prototype.plus = SmallInteger.prototype.add;\r\n\r\n    NativeBigInt.prototype.add = function (v) {\r\n        return new NativeBigInt(this.value + parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.plus = NativeBigInt.prototype.add;\r\n\r\n    function subtract(a, b) { // assumes a and b are arrays with a >= b\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            r = new Array(a_l),\r\n            borrow = 0,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < b_l; i++) {\r\n            difference = a[i] - borrow - b[i];\r\n            if (difference < 0) {\r\n                difference += base;\r\n                borrow = 1;\r\n            } else borrow = 0;\r\n            r[i] = difference;\r\n        }\r\n        for (i = b_l; i < a_l; i++) {\r\n            difference = a[i] - borrow;\r\n            if (difference < 0) difference += base;\r\n            else {\r\n                r[i++] = difference;\r\n                break;\r\n            }\r\n            r[i] = difference;\r\n        }\r\n        for (; i < a_l; i++) {\r\n            r[i] = a[i];\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function subtractAny(a, b, sign) {\r\n        var value;\r\n        if (compareAbs(a, b) >= 0) {\r\n            value = subtract(a, b);\r\n        } else {\r\n            value = subtract(b, a);\r\n            sign = !sign;\r\n        }\r\n        value = arrayToSmall(value);\r\n        if (typeof value === \"number\") {\r\n            if (sign) value = -value;\r\n            return new SmallInteger(value);\r\n        }\r\n        return new BigInteger(value, sign);\r\n    }\r\n\r\n    function subtractSmall(a, b, sign) { // assumes a is array, b is number with 0 <= b < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            carry = -b,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < l; i++) {\r\n            difference = a[i] + carry;\r\n            carry = Math.floor(difference / base);\r\n            difference %= base;\r\n            r[i] = difference < 0 ? difference + base : difference;\r\n        }\r\n        r = arrayToSmall(r);\r\n        if (typeof r === \"number\") {\r\n            if (sign) r = -r;\r\n            return new SmallInteger(r);\r\n        } return new BigInteger(r, sign);\r\n    }\r\n\r\n    BigInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall)\r\n            return subtractSmall(a, Math.abs(b), this.sign);\r\n        return subtractAny(a, b, this.sign);\r\n    };\r\n    BigInteger.prototype.minus = BigInteger.prototype.subtract;\r\n\r\n    SmallInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            return new SmallInteger(a - b);\r\n        }\r\n        return subtractSmall(b, Math.abs(a), a >= 0);\r\n    };\r\n    SmallInteger.prototype.minus = SmallInteger.prototype.subtract;\r\n\r\n    NativeBigInt.prototype.subtract = function (v) {\r\n        return new NativeBigInt(this.value - parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.minus = NativeBigInt.prototype.subtract;\r\n\r\n    BigInteger.prototype.negate = function () {\r\n        return new BigInteger(this.value, !this.sign);\r\n    };\r\n    SmallInteger.prototype.negate = function () {\r\n        var sign = this.sign;\r\n        var small = new SmallInteger(-this.value);\r\n        small.sign = !sign;\r\n        return small;\r\n    };\r\n    NativeBigInt.prototype.negate = function () {\r\n        return new NativeBigInt(-this.value);\r\n    }\r\n\r\n    BigInteger.prototype.abs = function () {\r\n        return new BigInteger(this.value, false);\r\n    };\r\n    SmallInteger.prototype.abs = function () {\r\n        return new SmallInteger(Math.abs(this.value));\r\n    };\r\n    NativeBigInt.prototype.abs = function () {\r\n        return new NativeBigInt(this.value >= 0 ? this.value : -this.value);\r\n    }\r\n\r\n\r\n    function multiplyLong(a, b) {\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            l = a_l + b_l,\r\n            r = createArray(l),\r\n            base = BASE,\r\n            product, carry, i, a_i, b_j;\r\n        for (i = 0; i < a_l; ++i) {\r\n            a_i = a[i];\r\n            for (var j = 0; j < b_l; ++j) {\r\n                b_j = b[j];\r\n                product = a_i * b_j + r[i + j];\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n                r[i + j + 1] += carry;\r\n            }\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function multiplySmall(a, b) { // assumes a is array, b is number with |b| < BASE\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            carry = 0,\r\n            product, i;\r\n        for (i = 0; i < l; i++) {\r\n            product = a[i] * b + carry;\r\n            carry = Math.floor(product / base);\r\n            r[i] = product - carry * base;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    function shiftLeft(x, n) {\r\n        var r = [];\r\n        while (n-- > 0) r.push(0);\r\n        return r.concat(x);\r\n    }\r\n\r\n    function multiplyKaratsuba(x, y) {\r\n        var n = Math.max(x.length, y.length);\r\n\r\n        if (n <= 30) return multiplyLong(x, y);\r\n        n = Math.ceil(n / 2);\r\n\r\n        var b = x.slice(n),\r\n            a = x.slice(0, n),\r\n            d = y.slice(n),\r\n            c = y.slice(0, n);\r\n\r\n        var ac = multiplyKaratsuba(a, c),\r\n            bd = multiplyKaratsuba(b, d),\r\n            abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));\r\n\r\n        var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));\r\n        trim(product);\r\n        return product;\r\n    }\r\n\r\n    // The following function is derived from a surface fit of a graph plotting the performance difference\r\n    // between long multiplication and karatsuba multiplication versus the lengths of the two arrays.\r\n    function useKaratsuba(l1, l2) {\r\n        return -0.012 * l1 - 0.012 * l2 + 0.000015 * l1 * l2 > 0;\r\n    }\r\n\r\n    BigInteger.prototype.multiply = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value, b = n.value,\r\n            sign = this.sign !== n.sign,\r\n            abs;\r\n        if (n.isSmall) {\r\n            if (b === 0) return Integer[0];\r\n            if (b === 1) return this;\r\n            if (b === -1) return this.negate();\r\n            abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                return new BigInteger(multiplySmall(a, abs), sign);\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        if (useKaratsuba(a.length, b.length)) // Karatsuba is only faster for certain array sizes\r\n            return new BigInteger(multiplyKaratsuba(a, b), sign);\r\n        return new BigInteger(multiplyLong(a, b), sign);\r\n    };\r\n\r\n    BigInteger.prototype.times = BigInteger.prototype.multiply;\r\n\r\n    function multiplySmallAndArray(a, b, sign) { // a >= 0\r\n        if (a < BASE) {\r\n            return new BigInteger(multiplySmall(b, a), sign);\r\n        }\r\n        return new BigInteger(multiplyLong(b, smallToArray(a)), sign);\r\n    }\r\n    SmallInteger.prototype._multiplyBySmall = function (a) {\r\n        if (isPrecise(a.value * this.value)) {\r\n            return new SmallInteger(a.value * this.value);\r\n        }\r\n        return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);\r\n    };\r\n    BigInteger.prototype._multiplyBySmall = function (a) {\r\n        if (a.value === 0) return Integer[0];\r\n        if (a.value === 1) return this;\r\n        if (a.value === -1) return this.negate();\r\n        return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);\r\n    };\r\n    SmallInteger.prototype.multiply = function (v) {\r\n        return parseValue(v)._multiplyBySmall(this);\r\n    };\r\n    SmallInteger.prototype.times = SmallInteger.prototype.multiply;\r\n\r\n    NativeBigInt.prototype.multiply = function (v) {\r\n        return new NativeBigInt(this.value * parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.times = NativeBigInt.prototype.multiply;\r\n\r\n    function square(a) {\r\n        //console.assert(2 * BASE * BASE < MAX_INT);\r\n        var l = a.length,\r\n            r = createArray(l + l),\r\n            base = BASE,\r\n            product, carry, i, a_i, a_j;\r\n        for (i = 0; i < l; i++) {\r\n            a_i = a[i];\r\n            carry = 0 - a_i * a_i;\r\n            for (var j = i; j < l; j++) {\r\n                a_j = a[j];\r\n                product = 2 * (a_i * a_j) + r[i + j] + carry;\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n            }\r\n            r[i + l] = carry;\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.square = function () {\r\n        return new BigInteger(square(this.value), false);\r\n    };\r\n\r\n    SmallInteger.prototype.square = function () {\r\n        var value = this.value * this.value;\r\n        if (isPrecise(value)) return new SmallInteger(value);\r\n        return new BigInteger(square(smallToArray(Math.abs(this.value))), false);\r\n    };\r\n\r\n    NativeBigInt.prototype.square = function (v) {\r\n        return new NativeBigInt(this.value * this.value);\r\n    }\r\n\r\n    function divMod1(a, b) { // Left over from previous version. Performs faster than divMod2 on smaller input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            base = BASE,\r\n            result = createArray(b.length),\r\n            divisorMostSignificantDigit = b[b_l - 1],\r\n            // normalization\r\n            lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)),\r\n            remainder = multiplySmall(a, lambda),\r\n            divisor = multiplySmall(b, lambda),\r\n            quotientDigit, shift, carry, borrow, i, l, q;\r\n        if (remainder.length <= a_l) remainder.push(0);\r\n        divisor.push(0);\r\n        divisorMostSignificantDigit = divisor[b_l - 1];\r\n        for (shift = a_l - b_l; shift >= 0; shift--) {\r\n            quotientDigit = base - 1;\r\n            if (remainder[shift + b_l] !== divisorMostSignificantDigit) {\r\n                quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);\r\n            }\r\n            // quotientDigit <= base - 1\r\n            carry = 0;\r\n            borrow = 0;\r\n            l = divisor.length;\r\n            for (i = 0; i < l; i++) {\r\n                carry += quotientDigit * divisor[i];\r\n                q = Math.floor(carry / base);\r\n                borrow += remainder[shift + i] - (carry - q * base);\r\n                carry = q;\r\n                if (borrow < 0) {\r\n                    remainder[shift + i] = borrow + base;\r\n                    borrow = -1;\r\n                } else {\r\n                    remainder[shift + i] = borrow;\r\n                    borrow = 0;\r\n                }\r\n            }\r\n            while (borrow !== 0) {\r\n                quotientDigit -= 1;\r\n                carry = 0;\r\n                for (i = 0; i < l; i++) {\r\n                    carry += remainder[shift + i] - base + divisor[i];\r\n                    if (carry < 0) {\r\n                        remainder[shift + i] = carry + base;\r\n                        carry = 0;\r\n                    } else {\r\n                        remainder[shift + i] = carry;\r\n                        carry = 1;\r\n                    }\r\n                }\r\n                borrow += carry;\r\n            }\r\n            result[shift] = quotientDigit;\r\n        }\r\n        // denormalization\r\n        remainder = divModSmall(remainder, lambda)[0];\r\n        return [arrayToSmall(result), arrayToSmall(remainder)];\r\n    }\r\n\r\n    function divMod2(a, b) { // Implementation idea shamelessly stolen from Silent Matt's library http://silentmatt.com/biginteger/\r\n        // Performs faster than divMod1 on larger input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            result = [],\r\n            part = [],\r\n            base = BASE,\r\n            guess, xlen, highx, highy, check;\r\n        while (a_l) {\r\n            part.unshift(a[--a_l]);\r\n            trim(part);\r\n            if (compareAbs(part, b) < 0) {\r\n                result.push(0);\r\n                continue;\r\n            }\r\n            xlen = part.length;\r\n            highx = part[xlen - 1] * base + part[xlen - 2];\r\n            highy = b[b_l - 1] * base + b[b_l - 2];\r\n            if (xlen > b_l) {\r\n                highx = (highx + 1) * base;\r\n            }\r\n            guess = Math.ceil(highx / highy);\r\n            do {\r\n                check = multiplySmall(b, guess);\r\n                if (compareAbs(check, part) <= 0) break;\r\n                guess--;\r\n            } while (guess);\r\n            result.push(guess);\r\n            part = subtract(part, check);\r\n        }\r\n        result.reverse();\r\n        return [arrayToSmall(result), arrayToSmall(part)];\r\n    }\r\n\r\n    function divModSmall(value, lambda) {\r\n        var length = value.length,\r\n            quotient = createArray(length),\r\n            base = BASE,\r\n            i, q, remainder, divisor;\r\n        remainder = 0;\r\n        for (i = length - 1; i >= 0; --i) {\r\n            divisor = remainder * base + value[i];\r\n            q = truncate(divisor / lambda);\r\n            remainder = divisor - q * lambda;\r\n            quotient[i] = q | 0;\r\n        }\r\n        return [quotient, remainder | 0];\r\n    }\r\n\r\n    function divModAny(self, v) {\r\n        var value, n = parseValue(v);\r\n        if (supportsNativeBigInt) {\r\n            return [new NativeBigInt(self.value / n.value), new NativeBigInt(self.value % n.value)];\r\n        }\r\n        var a = self.value, b = n.value;\r\n        var quotient;\r\n        if (b === 0) throw new Error(\"Cannot divide by zero\");\r\n        if (self.isSmall) {\r\n            if (n.isSmall) {\r\n                return [new SmallInteger(truncate(a / b)), new SmallInteger(a % b)];\r\n            }\r\n            return [Integer[0], self];\r\n        }\r\n        if (n.isSmall) {\r\n            if (b === 1) return [self, Integer[0]];\r\n            if (b == -1) return [self.negate(), Integer[0]];\r\n            var abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                value = divModSmall(a, abs);\r\n                quotient = arrayToSmall(value[0]);\r\n                var remainder = value[1];\r\n                if (self.sign) remainder = -remainder;\r\n                if (typeof quotient === \"number\") {\r\n                    if (self.sign !== n.sign) quotient = -quotient;\r\n                    return [new SmallInteger(quotient), new SmallInteger(remainder)];\r\n                }\r\n                return [new BigInteger(quotient, self.sign !== n.sign), new SmallInteger(remainder)];\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        var comparison = compareAbs(a, b);\r\n        if (comparison === -1) return [Integer[0], self];\r\n        if (comparison === 0) return [Integer[self.sign === n.sign ? 1 : -1], Integer[0]];\r\n\r\n        // divMod1 is faster on smaller input sizes\r\n        if (a.length + b.length <= 200)\r\n            value = divMod1(a, b);\r\n        else value = divMod2(a, b);\r\n\r\n        quotient = value[0];\r\n        var qSign = self.sign !== n.sign,\r\n            mod = value[1],\r\n            mSign = self.sign;\r\n        if (typeof quotient === \"number\") {\r\n            if (qSign) quotient = -quotient;\r\n            quotient = new SmallInteger(quotient);\r\n        } else quotient = new BigInteger(quotient, qSign);\r\n        if (typeof mod === \"number\") {\r\n            if (mSign) mod = -mod;\r\n            mod = new SmallInteger(mod);\r\n        } else mod = new BigInteger(mod, mSign);\r\n        return [quotient, mod];\r\n    }\r\n\r\n    BigInteger.prototype.divmod = function (v) {\r\n        var result = divModAny(this, v);\r\n        return {\r\n            quotient: result[0],\r\n            remainder: result[1]\r\n        };\r\n    };\r\n    NativeBigInt.prototype.divmod = SmallInteger.prototype.divmod = BigInteger.prototype.divmod;\r\n\r\n\r\n    BigInteger.prototype.divide = function (v) {\r\n        return divModAny(this, v)[0];\r\n    };\r\n    NativeBigInt.prototype.over = NativeBigInt.prototype.divide = function (v) {\r\n        return new NativeBigInt(this.value / parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;\r\n\r\n    BigInteger.prototype.mod = function (v) {\r\n        return divModAny(this, v)[1];\r\n    };\r\n    NativeBigInt.prototype.mod = NativeBigInt.prototype.remainder = function (v) {\r\n        return new NativeBigInt(this.value % parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;\r\n\r\n    BigInteger.prototype.pow = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value,\r\n            value, x, y;\r\n        if (b === 0) return Integer[1];\r\n        if (a === 0) return Integer[0];\r\n        if (a === 1) return Integer[1];\r\n        if (a === -1) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.sign) {\r\n            return Integer[0];\r\n        }\r\n        if (!n.isSmall) throw new Error(\"The exponent \" + n.toString() + \" is too large.\");\r\n        if (this.isSmall) {\r\n            if (isPrecise(value = Math.pow(a, b)))\r\n                return new SmallInteger(truncate(value));\r\n        }\r\n        x = this;\r\n        y = Integer[1];\r\n        while (true) {\r\n            if (b & 1 === 1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === 0) break;\r\n            b /= 2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    };\r\n    SmallInteger.prototype.pow = BigInteger.prototype.pow;\r\n\r\n    NativeBigInt.prototype.pow = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value, b = n.value;\r\n        var _0 = BigInt(0), _1 = BigInt(1), _2 = BigInt(2);\r\n        if (b === _0) return Integer[1];\r\n        if (a === _0) return Integer[0];\r\n        if (a === _1) return Integer[1];\r\n        if (a === BigInt(-1)) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.isNegative()) return new NativeBigInt(_0);\r\n        var x = this;\r\n        var y = Integer[1];\r\n        while (true) {\r\n            if ((b & _1) === _1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === _0) break;\r\n            b /= _2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    }\r\n\r\n    BigInteger.prototype.modPow = function (exp, mod) {\r\n        exp = parseValue(exp);\r\n        mod = parseValue(mod);\r\n        if (mod.isZero()) throw new Error(\"Cannot take modPow with modulus 0\");\r\n        var r = Integer[1],\r\n            base = this.mod(mod);\r\n        if (exp.isNegative()) {\r\n            exp = exp.multiply(Integer[-1]);\r\n            base = base.modInv(mod);\r\n        }\r\n        while (exp.isPositive()) {\r\n            if (base.isZero()) return Integer[0];\r\n            if (exp.isOdd()) r = r.multiply(base).mod(mod);\r\n            exp = exp.divide(2);\r\n            base = base.square().mod(mod);\r\n        }\r\n        return r;\r\n    };\r\n    NativeBigInt.prototype.modPow = SmallInteger.prototype.modPow = BigInteger.prototype.modPow;\r\n\r\n    function compareAbs(a, b) {\r\n        if (a.length !== b.length) {\r\n            return a.length > b.length ? 1 : -1;\r\n        }\r\n        for (var i = a.length - 1; i >= 0; i--) {\r\n            if (a[i] !== b[i]) return a[i] > b[i] ? 1 : -1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    BigInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) return 1;\r\n        return compareAbs(a, b);\r\n    };\r\n    SmallInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = Math.abs(this.value),\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            b = Math.abs(b);\r\n            return a === b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        return -1;\r\n    };\r\n    NativeBigInt.prototype.compareAbs = function (v) {\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        a = a >= 0 ? a : -a;\r\n        b = b >= 0 ? b : -b;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n\r\n    BigInteger.prototype.compare = function (v) {\r\n        // See discussion about comparison with Infinity:\r\n        // https://github.com/peterolson/BigInteger.js/issues/61\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (this.sign !== n.sign) {\r\n            return n.sign ? 1 : -1;\r\n        }\r\n        if (n.isSmall) {\r\n            return this.sign ? -1 : 1;\r\n        }\r\n        return compareAbs(a, b) * (this.sign ? -1 : 1);\r\n    };\r\n    BigInteger.prototype.compareTo = BigInteger.prototype.compare;\r\n\r\n    SmallInteger.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            return a == b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        if (a < 0 !== n.sign) {\r\n            return a < 0 ? -1 : 1;\r\n        }\r\n        return a < 0 ? 1 : -1;\r\n    };\r\n    SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;\r\n\r\n    NativeBigInt.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n    NativeBigInt.prototype.compareTo = NativeBigInt.prototype.compare;\r\n\r\n    BigInteger.prototype.equals = function (v) {\r\n        return this.compare(v) === 0;\r\n    };\r\n    NativeBigInt.prototype.eq = NativeBigInt.prototype.equals = SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;\r\n\r\n    BigInteger.prototype.notEquals = function (v) {\r\n        return this.compare(v) !== 0;\r\n    };\r\n    NativeBigInt.prototype.neq = NativeBigInt.prototype.notEquals = SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;\r\n\r\n    BigInteger.prototype.greater = function (v) {\r\n        return this.compare(v) > 0;\r\n    };\r\n    NativeBigInt.prototype.gt = NativeBigInt.prototype.greater = SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;\r\n\r\n    BigInteger.prototype.lesser = function (v) {\r\n        return this.compare(v) < 0;\r\n    };\r\n    NativeBigInt.prototype.lt = NativeBigInt.prototype.lesser = SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;\r\n\r\n    BigInteger.prototype.greaterOrEquals = function (v) {\r\n        return this.compare(v) >= 0;\r\n    };\r\n    NativeBigInt.prototype.geq = NativeBigInt.prototype.greaterOrEquals = SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;\r\n\r\n    BigInteger.prototype.lesserOrEquals = function (v) {\r\n        return this.compare(v) <= 0;\r\n    };\r\n    NativeBigInt.prototype.leq = NativeBigInt.prototype.lesserOrEquals = SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;\r\n\r\n    BigInteger.prototype.isEven = function () {\r\n        return (this.value[0] & 1) === 0;\r\n    };\r\n    SmallInteger.prototype.isEven = function () {\r\n        return (this.value & 1) === 0;\r\n    };\r\n    NativeBigInt.prototype.isEven = function () {\r\n        return (this.value & BigInt(1)) === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isOdd = function () {\r\n        return (this.value[0] & 1) === 1;\r\n    };\r\n    SmallInteger.prototype.isOdd = function () {\r\n        return (this.value & 1) === 1;\r\n    };\r\n    NativeBigInt.prototype.isOdd = function () {\r\n        return (this.value & BigInt(1)) === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isPositive = function () {\r\n        return !this.sign;\r\n    };\r\n    SmallInteger.prototype.isPositive = function () {\r\n        return this.value > 0;\r\n    };\r\n    NativeBigInt.prototype.isPositive = SmallInteger.prototype.isPositive;\r\n\r\n    BigInteger.prototype.isNegative = function () {\r\n        return this.sign;\r\n    };\r\n    SmallInteger.prototype.isNegative = function () {\r\n        return this.value < 0;\r\n    };\r\n    NativeBigInt.prototype.isNegative = SmallInteger.prototype.isNegative;\r\n\r\n    BigInteger.prototype.isUnit = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isUnit = function () {\r\n        return Math.abs(this.value) === 1;\r\n    };\r\n    NativeBigInt.prototype.isUnit = function () {\r\n        return this.abs().value === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isZero = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isZero = function () {\r\n        return this.value === 0;\r\n    };\r\n    NativeBigInt.prototype.isZero = function () {\r\n        return this.value === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isDivisibleBy = function (v) {\r\n        var n = parseValue(v);\r\n        if (n.isZero()) return false;\r\n        if (n.isUnit()) return true;\r\n        if (n.compareAbs(2) === 0) return this.isEven();\r\n        return this.mod(n).isZero();\r\n    };\r\n    NativeBigInt.prototype.isDivisibleBy = SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;\r\n\r\n    function isBasicPrime(v) {\r\n        var n = v.abs();\r\n        if (n.isUnit()) return false;\r\n        if (n.equals(2) || n.equals(3) || n.equals(5)) return true;\r\n        if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5)) return false;\r\n        if (n.lesser(49)) return true;\r\n        // we don't know if it's prime: let the other functions figure it out\r\n    }\r\n\r\n    function millerRabinTest(n, a) {\r\n        var nPrev = n.prev(),\r\n            b = nPrev,\r\n            r = 0,\r\n            d, t, i, x;\r\n        while (b.isEven()) b = b.divide(2), r++;\r\n        next: for (i = 0; i < a.length; i++) {\r\n            if (n.lesser(a[i])) continue;\r\n            x = bigInt(a[i]).modPow(b, n);\r\n            if (x.isUnit() || x.equals(nPrev)) continue;\r\n            for (d = r - 1; d != 0; d--) {\r\n                x = x.square().mod(n);\r\n                if (x.isUnit()) return false;\r\n                if (x.equals(nPrev)) continue next;\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Set \"strict\" to true to force GRH-supported lower bound of 2*log(N)^2\r\n    BigInteger.prototype.isPrime = function (strict) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var bits = n.bitLength();\r\n        if (bits <= 64)\r\n            return millerRabinTest(n, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]);\r\n        var logN = Math.log(2) * bits.toJSNumber();\r\n        var t = Math.ceil((strict === true) ? (2 * Math.pow(logN, 2)) : logN);\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt(i + 2));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isPrime = SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;\r\n\r\n    BigInteger.prototype.isProbablePrime = function (iterations, rng) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var t = iterations === undefined ? 5 : iterations;\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt.randBetween(2, n.minus(2), rng));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isProbablePrime = SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;\r\n\r\n    BigInteger.prototype.modInv = function (n) {\r\n        var t = bigInt.zero, newT = bigInt.one, r = parseValue(n), newR = this.abs(), q, lastT, lastR;\r\n        while (!newR.isZero()) {\r\n            q = r.divide(newR);\r\n            lastT = t;\r\n            lastR = r;\r\n            t = newT;\r\n            r = newR;\r\n            newT = lastT.subtract(q.multiply(newT));\r\n            newR = lastR.subtract(q.multiply(newR));\r\n        }\r\n        if (!r.isUnit()) throw new Error(this.toString() + \" and \" + n.toString() + \" are not co-prime\");\r\n        if (t.compare(0) === -1) {\r\n            t = t.add(n);\r\n        }\r\n        if (this.isNegative()) {\r\n            return t.negate();\r\n        }\r\n        return t;\r\n    };\r\n\r\n    NativeBigInt.prototype.modInv = SmallInteger.prototype.modInv = BigInteger.prototype.modInv;\r\n\r\n    BigInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return subtractSmall(value, 1, this.sign);\r\n        }\r\n        return new BigInteger(addSmall(value, 1), this.sign);\r\n    };\r\n    SmallInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (value + 1 < MAX_INT) return new SmallInteger(value + 1);\r\n        return new BigInteger(MAX_INT_ARR, false);\r\n    };\r\n    NativeBigInt.prototype.next = function () {\r\n        return new NativeBigInt(this.value + BigInt(1));\r\n    }\r\n\r\n    BigInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return new BigInteger(addSmall(value, 1), true);\r\n        }\r\n        return subtractSmall(value, 1, this.sign);\r\n    };\r\n    SmallInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (value - 1 > -MAX_INT) return new SmallInteger(value - 1);\r\n        return new BigInteger(MAX_INT_ARR, true);\r\n    };\r\n    NativeBigInt.prototype.prev = function () {\r\n        return new NativeBigInt(this.value - BigInt(1));\r\n    }\r\n\r\n    var powersOfTwo = [1];\r\n    while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE) powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);\r\n    var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];\r\n\r\n    function shift_isSmall(n) {\r\n        return Math.abs(n) <= BASE;\r\n    }\r\n\r\n    BigInteger.prototype.shiftLeft = function (v) {\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftRight(-n);\r\n        var result = this;\r\n        if (result.isZero()) return result;\r\n        while (n >= powers2Length) {\r\n            result = result.multiply(highestPower2);\r\n            n -= powers2Length - 1;\r\n        }\r\n        return result.multiply(powersOfTwo[n]);\r\n    };\r\n    NativeBigInt.prototype.shiftLeft = SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;\r\n\r\n    BigInteger.prototype.shiftRight = function (v) {\r\n        var remQuo;\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftLeft(-n);\r\n        var result = this;\r\n        while (n >= powers2Length) {\r\n            if (result.isZero() || (result.isNegative() && result.isUnit())) return result;\r\n            remQuo = divModAny(result, highestPower2);\r\n            result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n            n -= powers2Length - 1;\r\n        }\r\n        remQuo = divModAny(result, powersOfTwo[n]);\r\n        return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n    };\r\n    NativeBigInt.prototype.shiftRight = SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;\r\n\r\n    function bitwise(x, y, fn) {\r\n        y = parseValue(y);\r\n        var xSign = x.isNegative(), ySign = y.isNegative();\r\n        var xRem = xSign ? x.not() : x,\r\n            yRem = ySign ? y.not() : y;\r\n        var xDigit = 0, yDigit = 0;\r\n        var xDivMod = null, yDivMod = null;\r\n        var result = [];\r\n        while (!xRem.isZero() || !yRem.isZero()) {\r\n            xDivMod = divModAny(xRem, highestPower2);\r\n            xDigit = xDivMod[1].toJSNumber();\r\n            if (xSign) {\r\n                xDigit = highestPower2 - 1 - xDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            yDivMod = divModAny(yRem, highestPower2);\r\n            yDigit = yDivMod[1].toJSNumber();\r\n            if (ySign) {\r\n                yDigit = highestPower2 - 1 - yDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            xRem = xDivMod[0];\r\n            yRem = yDivMod[0];\r\n            result.push(fn(xDigit, yDigit));\r\n        }\r\n        var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt(-1) : bigInt(0);\r\n        for (var i = result.length - 1; i >= 0; i -= 1) {\r\n            sum = sum.multiply(highestPower2).add(bigInt(result[i]));\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    BigInteger.prototype.not = function () {\r\n        return this.negate().prev();\r\n    };\r\n    NativeBigInt.prototype.not = SmallInteger.prototype.not = BigInteger.prototype.not;\r\n\r\n    BigInteger.prototype.and = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a & b; });\r\n    };\r\n    NativeBigInt.prototype.and = SmallInteger.prototype.and = BigInteger.prototype.and;\r\n\r\n    BigInteger.prototype.or = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a | b; });\r\n    };\r\n    NativeBigInt.prototype.or = SmallInteger.prototype.or = BigInteger.prototype.or;\r\n\r\n    BigInteger.prototype.xor = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a ^ b; });\r\n    };\r\n    NativeBigInt.prototype.xor = SmallInteger.prototype.xor = BigInteger.prototype.xor;\r\n\r\n    var LOBMASK_I = 1 << 30, LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;\r\n    function roughLOB(n) { // get lowestOneBit (rough)\r\n        // SmallInteger: return Min(lowestOneBit(n), 1 << 30)\r\n        // BigInteger: return Min(lowestOneBit(n), 1 << 14) [BASE=1e7]\r\n        var v = n.value,\r\n            x = typeof v === \"number\" ? v | LOBMASK_I :\r\n                typeof v === \"bigint\" ? v | BigInt(LOBMASK_I) :\r\n                    v[0] + v[1] * BASE | LOBMASK_BI;\r\n        return x & -x;\r\n    }\r\n\r\n    function integerLogarithm(value, base) {\r\n        if (base.compareTo(value) <= 0) {\r\n            var tmp = integerLogarithm(value, base.square(base));\r\n            var p = tmp.p;\r\n            var e = tmp.e;\r\n            var t = p.multiply(base);\r\n            return t.compareTo(value) <= 0 ? { p: t, e: e * 2 + 1 } : { p: p, e: e * 2 };\r\n        }\r\n        return { p: bigInt(1), e: 0 };\r\n    }\r\n\r\n    BigInteger.prototype.bitLength = function () {\r\n        var n = this;\r\n        if (n.compareTo(bigInt(0)) < 0) {\r\n            n = n.negate().subtract(bigInt(1));\r\n        }\r\n        if (n.compareTo(bigInt(0)) === 0) {\r\n            return bigInt(0);\r\n        }\r\n        return bigInt(integerLogarithm(n, bigInt(2)).e).add(bigInt(1));\r\n    }\r\n    NativeBigInt.prototype.bitLength = SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;\r\n\r\n    function max(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.greater(b) ? a : b;\r\n    }\r\n    function min(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.lesser(b) ? a : b;\r\n    }\r\n    function gcd(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        if (a.equals(b)) return a;\r\n        if (a.isZero()) return b;\r\n        if (b.isZero()) return a;\r\n        var c = Integer[1], d, t;\r\n        while (a.isEven() && b.isEven()) {\r\n            d = min(roughLOB(a), roughLOB(b));\r\n            a = a.divide(d);\r\n            b = b.divide(d);\r\n            c = c.multiply(d);\r\n        }\r\n        while (a.isEven()) {\r\n            a = a.divide(roughLOB(a));\r\n        }\r\n        do {\r\n            while (b.isEven()) {\r\n                b = b.divide(roughLOB(b));\r\n            }\r\n            if (a.greater(b)) {\r\n                t = b; b = a; a = t;\r\n            }\r\n            b = b.subtract(a);\r\n        } while (!b.isZero());\r\n        return c.isUnit() ? a : a.multiply(c);\r\n    }\r\n    function lcm(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        return a.divide(gcd(a, b)).multiply(b);\r\n    }\r\n    function randBetween(a, b, rng) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        var usedRNG = rng || Math.random;\r\n        var low = min(a, b), high = max(a, b);\r\n        var range = high.subtract(low).add(1);\r\n        if (range.isSmall) return low.add(Math.floor(usedRNG() * range));\r\n        var digits = toBase(range, BASE).value;\r\n        var result = [], restricted = true;\r\n        for (var i = 0; i < digits.length; i++) {\r\n            var top = restricted ? digits[i] : BASE;\r\n            var digit = truncate(usedRNG() * top);\r\n            result.push(digit);\r\n            if (digit < top) restricted = false;\r\n        }\r\n        return low.add(Integer.fromArray(result, BASE, false));\r\n    }\r\n\r\n    var parseBase = function (text, base, alphabet, caseSensitive) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        text = String(text);\r\n        if (!caseSensitive) {\r\n            text = text.toLowerCase();\r\n            alphabet = alphabet.toLowerCase();\r\n        }\r\n        var length = text.length;\r\n        var i;\r\n        var absBase = Math.abs(base);\r\n        var alphabetValues = {};\r\n        for (i = 0; i < alphabet.length; i++) {\r\n            alphabetValues[alphabet[i]] = i;\r\n        }\r\n        for (i = 0; i < length; i++) {\r\n            var c = text[i];\r\n            if (c === \"-\") continue;\r\n            if (c in alphabetValues) {\r\n                if (alphabetValues[c] >= absBase) {\r\n                    if (c === \"1\" && absBase === 1) continue;\r\n                    throw new Error(c + \" is not a valid digit in base \" + base + \".\");\r\n                }\r\n            }\r\n        }\r\n        base = parseValue(base);\r\n        var digits = [];\r\n        var isNegative = text[0] === \"-\";\r\n        for (i = isNegative ? 1 : 0; i < text.length; i++) {\r\n            var c = text[i];\r\n            if (c in alphabetValues) digits.push(parseValue(alphabetValues[c]));\r\n            else if (c === \"<\") {\r\n                var start = i;\r\n                do { i++; } while (text[i] !== \">\" && i < text.length);\r\n                digits.push(parseValue(text.slice(start + 1, i)));\r\n            }\r\n            else throw new Error(c + \" is not a valid character\");\r\n        }\r\n        return parseBaseFromArray(digits, base, isNegative);\r\n    };\r\n\r\n    function parseBaseFromArray(digits, base, isNegative) {\r\n        var val = Integer[0], pow = Integer[1], i;\r\n        for (i = digits.length - 1; i >= 0; i--) {\r\n            val = val.add(digits[i].times(pow));\r\n            pow = pow.times(base);\r\n        }\r\n        return isNegative ? val.negate() : val;\r\n    }\r\n\r\n    function stringify(digit, alphabet) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        if (digit < alphabet.length) {\r\n            return alphabet[digit];\r\n        }\r\n        return \"<\" + digit + \">\";\r\n    }\r\n\r\n    function toBase(n, base) {\r\n        base = bigInt(base);\r\n        if (base.isZero()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            throw new Error(\"Cannot convert nonzero numbers to base 0.\");\r\n        }\r\n        if (base.equals(-1)) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            if (n.isNegative())\r\n                return {\r\n                    value: [].concat.apply([], Array.apply(null, Array(-n.toJSNumber()))\r\n                        .map(Array.prototype.valueOf, [1, 0])\r\n                    ),\r\n                    isNegative: false\r\n                };\r\n\r\n            var arr = Array.apply(null, Array(n.toJSNumber() - 1))\r\n                .map(Array.prototype.valueOf, [0, 1]);\r\n            arr.unshift([1]);\r\n            return {\r\n                value: [].concat.apply([], arr),\r\n                isNegative: false\r\n            };\r\n        }\r\n\r\n        var neg = false;\r\n        if (n.isNegative() && base.isPositive()) {\r\n            neg = true;\r\n            n = n.abs();\r\n        }\r\n        if (base.isUnit()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n\r\n            return {\r\n                value: Array.apply(null, Array(n.toJSNumber()))\r\n                    .map(Number.prototype.valueOf, 1),\r\n                isNegative: neg\r\n            };\r\n        }\r\n        var out = [];\r\n        var left = n, divmod;\r\n        while (left.isNegative() || left.compareAbs(base) >= 0) {\r\n            divmod = left.divmod(base);\r\n            left = divmod.quotient;\r\n            var digit = divmod.remainder;\r\n            if (digit.isNegative()) {\r\n                digit = base.minus(digit).abs();\r\n                left = left.next();\r\n            }\r\n            out.push(digit.toJSNumber());\r\n        }\r\n        out.push(left.toJSNumber());\r\n        return { value: out.reverse(), isNegative: neg };\r\n    }\r\n\r\n    function toBaseString(n, base, alphabet) {\r\n        var arr = toBase(n, base);\r\n        return (arr.isNegative ? \"-\" : \"\") + arr.value.map(function (x) {\r\n            return stringify(x, alphabet);\r\n        }).join('');\r\n    }\r\n\r\n    BigInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    SmallInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    NativeBigInt.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    BigInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix !== 10) return toBaseString(this, radix, alphabet);\r\n        var v = this.value, l = v.length, str = String(v[--l]), zeros = \"0000000\", digit;\r\n        while (--l >= 0) {\r\n            digit = String(v[l]);\r\n            str += zeros.slice(digit.length) + digit;\r\n        }\r\n        var sign = this.sign ? \"-\" : \"\";\r\n        return sign + str;\r\n    };\r\n\r\n    SmallInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix != 10) return toBaseString(this, radix, alphabet);\r\n        return String(this.value);\r\n    };\r\n\r\n    NativeBigInt.prototype.toString = SmallInteger.prototype.toString;\r\n\r\n    NativeBigInt.prototype.toJSON = BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function () { return this.toString(); }\r\n\r\n    BigInteger.prototype.valueOf = function () {\r\n        return parseInt(this.toString(), 10);\r\n    };\r\n    BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;\r\n\r\n    SmallInteger.prototype.valueOf = function () {\r\n        return this.value;\r\n    };\r\n    SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;\r\n    NativeBigInt.prototype.valueOf = NativeBigInt.prototype.toJSNumber = function () {\r\n        return parseInt(this.toString(), 10);\r\n    }\r\n\r\n    function parseStringValue(v) {\r\n        if (isPrecise(+v)) {\r\n            var x = +v;\r\n            if (x === truncate(x))\r\n                return supportsNativeBigInt ? new NativeBigInt(BigInt(x)) : new SmallInteger(x);\r\n            throw new Error(\"Invalid integer: \" + v);\r\n        }\r\n        var sign = v[0] === \"-\";\r\n        if (sign) v = v.slice(1);\r\n        var split = v.split(/e/i);\r\n        if (split.length > 2) throw new Error(\"Invalid integer: \" + split.join(\"e\"));\r\n        if (split.length === 2) {\r\n            var exp = split[1];\r\n            if (exp[0] === \"+\") exp = exp.slice(1);\r\n            exp = +exp;\r\n            if (exp !== truncate(exp) || !isPrecise(exp)) throw new Error(\"Invalid integer: \" + exp + \" is not a valid exponent.\");\r\n            var text = split[0];\r\n            var decimalPlace = text.indexOf(\".\");\r\n            if (decimalPlace >= 0) {\r\n                exp -= text.length - decimalPlace - 1;\r\n                text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);\r\n            }\r\n            if (exp < 0) throw new Error(\"Cannot include negative exponent part for integers\");\r\n            text += (new Array(exp + 1)).join(\"0\");\r\n            v = text;\r\n        }\r\n        var isValid = /^([0-9][0-9]*)$/.test(v);\r\n        if (!isValid) throw new Error(\"Invalid integer: \" + v);\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(sign ? \"-\" + v : v));\r\n        }\r\n        var r = [], max = v.length, l = LOG_BASE, min = max - l;\r\n        while (max > 0) {\r\n            r.push(+v.slice(min, max));\r\n            min -= l;\r\n            if (min < 0) min = 0;\r\n            max -= l;\r\n        }\r\n        trim(r);\r\n        return new BigInteger(r, sign);\r\n    }\r\n\r\n    function parseNumberValue(v) {\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(v));\r\n        }\r\n        if (isPrecise(v)) {\r\n            if (v !== truncate(v)) throw new Error(v + \" is not an integer.\");\r\n            return new SmallInteger(v);\r\n        }\r\n        return parseStringValue(v.toString());\r\n    }\r\n\r\n    function parseValue(v) {\r\n        if (typeof v === \"number\") {\r\n            return parseNumberValue(v);\r\n        }\r\n        if (typeof v === \"string\") {\r\n            return parseStringValue(v);\r\n        }\r\n        if (typeof v === \"bigint\") {\r\n            return new NativeBigInt(v);\r\n        }\r\n        return v;\r\n    }\r\n    // Pre-define numbers in range [-999,999]\r\n    for (var i = 0; i < 1000; i++) {\r\n        Integer[i] = parseValue(i);\r\n        if (i > 0) Integer[-i] = parseValue(-i);\r\n    }\r\n    // Backwards compatibility\r\n    Integer.one = Integer[1];\r\n    Integer.zero = Integer[0];\r\n    Integer.minusOne = Integer[-1];\r\n    Integer.max = max;\r\n    Integer.min = min;\r\n    Integer.gcd = gcd;\r\n    Integer.lcm = lcm;\r\n    Integer.isInstance = function (x) { return x instanceof BigInteger || x instanceof SmallInteger || x instanceof NativeBigInt; };\r\n    Integer.randBetween = randBetween;\r\n\r\n    Integer.fromArray = function (digits, base, isNegative) {\r\n        return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);\r\n    };\r\n\r\n    return Integer;\r\n})();\r\n\r\n// Node.js check\r\nif (typeof module !== \"undefined\" && module.hasOwnProperty(\"exports\")) {\r\n    module.exports = bigInt;\r\n}\r\n\r\n//amd check\r\nif (typeof define === \"function\" && define.amd) {\r\n    define( function () {\r\n        return bigInt;\r\n    });\r\n}\r\n","const bigInt = require(\"big-integer\")\n\ndocument.addEventListener(\"DOMContentLoaded\", function(event) {\n  years_per_universe      = bigInt(\"10e100\");\n  milliseconds_per_year   = bigInt(\"3.1536e10\");\n  plancks_per_millisecond = bigInt(\"1.855e40\");\n\n  milliseconds_per_universe = milliseconds_per_year.multiply(years_per_universe);\n\n  setInterval(function() {\n    now_ms       = bigInt(Date.now());\n    remaining_ms = milliseconds_per_universe.minus(now_ms);\n    remaining_p  = plancks_per_millisecond.multiply(remaining_ms);\n\n    // last 38 chars are zeros, should be random\n    remaining_p_fuzzy = remaining_p.toString().split('');\n    for (i = 0; i < 38; i++) {\n      remaining_p_fuzzy[151 - i] = Math.floor(Math.random() * 10);\n    }\n    remaining_p_fuzzy = bigInt(remaining_p_fuzzy.join(''));\n\n    remaining_p_fuzzy_binary = remaining_p_fuzzy.toString(2);\n    while (remaining_p_fuzzy_binary.length < 506) {\n      remaining_p_fuzzy_binary = '0' + remaining_p_fuzzy_binary;\n    }\n\n    remaining_p_fuzzy_binary = remaining_p_fuzzy_binary.replace(/(.{23})/g, \"$1\\n\")\n    remaining_p_fuzzy_binary = remaining_p_fuzzy_binary.replace(/(.)/g, \"$1 \")\n\n    remaining_p_fuzzy_binary = remaining_p_fuzzy_binary.replace(/0/g, \" \")\n    remaining_p_fuzzy_binary = remaining_p_fuzzy_binary.replace(/1/g, \"●\")\n\n    document.getElementById(\"time\").innerHTML = remaining_p_fuzzy_binary;\n  }, 16);\n});\n"]}